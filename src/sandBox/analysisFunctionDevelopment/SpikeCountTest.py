# S. Pickard
# June 2016
# (Using python 3.4.4, and brian2 2.0rc)
#
# DESCRIPTION
#   Here test a function/method that produces a smooth firing rate approximation of neuron spike output.
#
#   Here we will show how methods for looking at the firing rate of a single neuron over time. These methods are
#   enumerated in firingRateDistrib_0_0.py, but are called and tested in this file.
#
#   Using data that has been saved (perhaps saved in "savedData_0/" and generated by "createData_0_0.py") here we will
#   demonstrate some ways to look at firing rate statistics.


import numpy as np
from SpikeCount import spike_count
import pickle

########################################################################################################################
# TESTING Spike Counting
########################################################################################################################
#This segment works
# # In the first test we will simply create some fake neuron output a specific frequency.
# staticFiringPattern = np.linspace(start=0, stop=5, num=10)
# print (staticFiringPattern)
# spikeCount = spike_count(spikeTime=staticFiringPattern, start=0 , stop=5, dt=.3)
# print (spikeCount)

# In the second test we will load some data that we have created in simulation and see what it looks like
# Input spike times
# inputFile = open("savedData_0/netOutput0_PoiNeu_SpikesTimes.pkl","rb")
# spikeTimes = pickle.load(inputFile)
# spikeTimesUnits = pickle.load(inputFile)
# inputFile.close()
# print (spikeTimes)

# # Input spike times indices,
# inputFile = open("savedData_0/netOutput0_PoiNeu_SpikesInds.pkl","rb")
# spikeTimeInds = pickle.load(inputFile)
# inputFile.close()
# # Find the spike times for a particular neuron
# neuronSpikeTimes = spikeTimes[spikeTimeInds==99]
#
# # Now find the firing rate
# smoothedRate = spike_count(time=neuronSpikeTimes, duration=10.0, dt=1.)
# plt.figure(2)
# plt.plot(smoothedRate[1],smoothedRate[0])
# plt.show()
#
# # #Spike count over user defined subinterval. We would like to know the number of spikes that occur over the whole run
# # #duration as well as the spike counts over subintervals. Calling SpikeCount returns spike count over subintervals
